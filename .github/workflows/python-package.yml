name: Python package

on:
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      tests:
        description: "Quins tests executar? Coma-separats o 'all'"
        required: false
        default: "all"

jobs:
  build:
    runs-on: ubuntu-latest
    environment: GABDConnect
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.base_ref == 'master' && github.head_ref == 'development')

    steps:
      - uses: actions/checkout@v4

      - name: Prepare SSH key
        run: |
          if [ -f "../dev_keys/${{ secrets.SSH_USER }}" ]; then
            echo "Usant clau local ../dev_keys/${{ secrets.SSH_USER }}"
            export SSH_KEY="../dev_keys/${{ secrets.SSH_USER }}"
          else
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key
            chmod 600 ssh_key
            export SSH_KEY="ssh_key"
          fi
          echo "SSH_KEY=$SSH_KEY" >> $GITHUB_ENV

      - name: Test SSH connection
        run: |
          ssh -i ssh_key -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "hostname && whoami"

      - name: Run builds sequentially on multiple Python versions
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PWD: ${{ secrets.SSH_PWD }}
          SSH_KEY: ${{ env.SSH_KEY }}
        run: |
          TESTS="${{ github.event.inputs.tests || 'all' }}"

          # Definim les versions de Python
          PY_VERSIONS=(3.8 3.9 3.10 3.11 3.12)

          for version in "${PY_VERSIONS[@]}"; do
            echo "=============================="
            echo " Running tests on Python $version "
            echo "=============================="

            # Setup Python via Action
            echo "::group::Setup Python $version"
            echo "::endgroup::"
            # Directament fem setup amb pyenv integrat a GitHub Actions
            # actions/setup-python només funciona com a 'uses:', per això fem un workaround amb exec
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install pytest flake8 pytest-timeout

            # Lint
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

            # Run tests
            if [ "$TESTS" = "all" ]; then
              pytest --timeout=600
            else
              IFS=',' read -ra TLIST <<< "$TESTS"
              for t in "${TLIST[@]}"; do
                pytest $t --timeout=600
              done
            fi
          done
