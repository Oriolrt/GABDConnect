name: Python package

on:
  # Trigger automàtic només per PR development → master
  pull_request:
    branches:
      - master
  # Trigger manual (on demand)
  workflow_dispatch:
    inputs:
      tests:
        description: "Quins tests executar? Coma-separats o 'all'"
        required: false
        default: "all"

jobs:
  build:
    runs-on: ubuntu-latest
    environment: GABDConnect
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.base_ref == 'master' && github.head_ref == 'development')

    steps:
      - uses: actions/checkout@v4

      - name: Install pyenv
        run: |
          curl https://pyenv.run | bash
          export PATH="$HOME/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"
          echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> $GITHUB_ENV
          echo 'eval "$(pyenv init -)"' >> $GITHUB_ENV
          echo 'eval "$(pyenv virtualenv-init -)"' >> $GITHUB_ENV

      - name: Prepare SSH key
        run: |
          if [ -f "../dev_keys/${{ secrets.SSH_USER }}" ]; then
            echo "Usant clau local ../dev_keys/${{ secrets.SSH_USER }}"
            export SSH_KEY="../dev_keys/${{ secrets.SSH_USER }}"
          else
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key
            chmod 600 ssh_key
            export SSH_KEY="ssh_key"
          fi
          echo "SSH_KEY=$SSH_KEY" >> $GITHUB_ENV

      - name: Test SSH connection
        run: |
          ssh -i ssh_key -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "hostname && whoami"

      - name: Run builds sequentially with pyenv
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PWD: ${{ secrets.SSH_PWD }}
          SSH_KEY: ${{ env.SSH_KEY }}
        run: |
          export PATH="$HOME/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"

          TESTS="${{ github.event.inputs.tests || 'all' }}"

          for version in 3.8.18 3.9.18 3.10.13 3.11.9 3.12.3; do
            echo "=============================="
            echo " Running tests on Python $version "
            echo "=============================="

            pyenv install -s $version
            pyenv global $version

            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install pytest flake8 pytest-timeout

            # Lint
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

            # Run tests
            if [ "$TESTS" = "all" ]; then
              pytest --timeout=600
            else
              IFS=',' read -ra TLIST <<< "$TESTS"
              for t in "${TLIST[@]}"; do
                pytest $t --timeout=600
              done
            fi
          done
