name: Python package

on:
   pull_request:
      branches:
        - master
   workflow_dispatch:
      inputs:
        build:
          description: "Quins tests executar? Coma-separats o 'all'"
          required: false
          default: "all"
        version_type:
          description: 'Version bump type (only runs after successful tests)'
          required: false
          default: ''
          type: choice
          options:
            - ''
            - patch
            - minor
            - major

jobs:
  build:
    # pot c√≥rrer en GitHub-hosted o en self-hosted
    runs-on: ${{ matrix.runner }}
    environment: GABDConnect
    if: github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'pull_request' && github.base_ref == 'master' && github.head_ref == 'development')

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        runner: [self-hosted]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create virtualenv
        run: |
          python -m venv .venv
          source .venv/bin/activate
          echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Prepare SSH key (~/.ssh/id_student o secrets)
        run: |
          if [ -f "$HOME/.ssh/id_student" ]; then
            echo "Trobada clau local a ~/.ssh/id_student, l'usar√©"
            export SSH_KEY="$HOME/.ssh/id_student"
          else
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key
            chmod 600 ssh_key
            export SSH_KEY="ssh_key"
          fi
          echo "SSH_KEY=$SSH_KEY" >> $GITHUB_ENV

      - name: Test SSH connection
        run: |
          ssh -i "$SSH_KEY" -p ${{ secrets.SSH_PORT }} \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "hostname && whoami"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8 pytest-timeout

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --statistics

      - name: Run selected tests
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PWD: ${{ secrets.SSH_PWD }}
          SSH_KEY: ${{ env.SSH_KEY }}
        run: |
          echo "Usant la clau SSH: $SSH_KEY"
          TESTS="${{ github.event.inputs.tests || 'all' }}"
          if [ "$TESTS" = "all" ]; then
            pytest --timeout=600
          else
            IFS=',' read -ra TLIST <<< "$TESTS"
            for t in "${TLIST[@]}"; do
              pytest $t --timeout=600
            done
          fi

      - name: Cleanup virtualenv
        if: always()
        run: |
          echo "Esborrant entorn virtual..."
          rm -rf "$VIRTUAL_ENV"

  bump-version:
    # Only run version bump job if:
    # - Tests pass successfully AND
    # - It's a manual workflow_dispatch trigger AND
    # - version_type input is provided (not empty)
    if: >
      always() &&
      (needs.test.result == 'success') &&
      (github.event_name == 'workflow_dispatch' && github.event.inputs.version_type != '')

    needs: build
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install bump2version
        run: pip install bump2version

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: |
          if [ -f setup.py ]; then
            VERSION=$(python setup.py --version)
          elif [ -f src/GABDConnect/__init__.py ]; then
            VERSION=$(python -c "import sys; sys.path.insert(0, 'src'); from GABDConnect import __version__; print(__version__)")
          else
            VERSION="0.1.0"
          fi
          echo "current=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Bump version
        id: bump
        run: |
          echo "Bumping version with type: ${{ github.event.inputs.version_type }}"

          # Check if .bumpversion.cfg exists, if not create it
          if [ ! -f .bumpversion.cfg ]; then
            echo "Creating .bumpversion.cfg"
            cat > .bumpversion.cfg << EOF
          [bumpversion]
          current_version = ${{ steps.current_version.outputs.current }}
          commit = True
          tag = True
          tag_name = v{new_version}
          message = Bump version: {current_version} ‚Üí {new_version}

          [bumpversion:file:setup.py]
          search = version="{current_version}"
          replace = version="{new_version}"

          [bumpversion:file:src/GABDConnect/__init__.py]
          search = __version__ = "{current_version}"
          replace = __version__ = "{new_version}"
          EOF
            git add .bumpversion.cfg
            git commit -m "Add bumpversion configuration"
          fi

          # Perform the version bump
          bump2version ${{ github.event.inputs.version_type }} --verbose

          # Get the new version
          NEW_VERSION=$(bump2version --dry-run --list ${{ github.event.inputs.version_type }} | grep new_version | cut -d= -f2)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Version bumped to: $NEW_VERSION"

      - name: Push changes
        run: |
          echo "Pushing changes and tags..."
          git push origin HEAD:${{ github.ref_name }}
          git push origin --tags

      - name: Create Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          release_name: Release v${{ steps.bump.outputs.new_version }}
          body: |
            ## Changes in v${{ steps.bump.outputs.new_version }}

            ### üöÄ What's Changed
            - Version bumped from ${{ steps.current_version.outputs.current }} to ${{ steps.bump.outputs.new_version }}
            - Type: `${{ github.event.inputs.version_type }}` version bump

            ### üìù Manual Release
            This release was created manually through GitHub Actions workflow.

            ### üîó Full Changelog
            Compare changes: [${{ steps.current_version.outputs.current }}...v${{ steps.bump.outputs.new_version }}](${{ github.server_url }}/${{ github.repository }}/compare/v${{ steps.current_version.outputs.current }}...v${{ steps.bump.outputs.new_version }})
          draft: false
          prerelease: false
